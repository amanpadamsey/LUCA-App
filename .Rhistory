shiny::runApp('R scripts/LUCA-App')
runApp('R scripts/LUCA-App')
.
getwd()
git -h
test_stop(1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
req(blah)
setwd("~/R scripts/LUCA-App")
#this function uses the functions in functions.R and does the downstream processing
source("functions.R")
#source functions from function file
# source("functions.R")
source("workflow.R")
source("C:/Users/Aman/Documents/R scripts/LUCA-App/workflow.R", echo=TRUE)
runApp()
runApp()
validate(True,"yolo")
validate(FALSE,"yolo")
validate(TRUE,"yolo")
?validate
ymd("2022.08.8")
ymd("2022-08-8")
ymd("2022088")
ymd("20220808")
ymd("200808")
cars
cars %>% mutate(speed = as.Date(speed))
cars %>% mutate(speed = ymd(speed))
cars %>% mutate(speed = ymd(speed)) %>% tryCatch("wrong file dummy")
cars %>% mutate(speed = ymd(speed)) %>% tryCatch(.,"wrong file dummy")
cars %>% mutate(speed = ymd(speed)) %>% tryCatch(warning = function(x){print("wrong file dummy")})
cars %>% mutate(speed = ymd(speed)) %>% tryCatch(error = function(x){print("wrong file dummy")})
cars %>% mutate(speed = as.character(speed)) %>% tryCatch(warning = function(x){print("wrong file dummy")}) %>% mutate(speed2 = speed)
cars %>% mutate(speed = as.character(speed)) %>% tryCatch(warning = function(err){cat("wrong file dummy")message(err)}) %>% mutate(speed2 = speed)
cars %>% mutate(speed = as.character(speed)) %>% tryCatch(warning = function(err){cat("wrong file dummy")
message(err)}) %>% mutate(speed2 = speed)
cars %>% mutate(speed = as.Date(speed)) %>% tryCatch(warning = function(err){cat("wrong file dummy")
message(err)}) %>% mutate(speed2 = speed)
cars %>% mutate(speed = ymd(speed)) %>% tryCatch(warning = function(err){cat("wrong file dummy")
message(err)}) %>% mutate(speed2 = speed)
cars %>% mutate(speed = ymd(speed)) %>% tryCatch(errorCondition = function(err){cat("wrong file dummy")
message(err)}) %>% mutate(speed2 = speed)
cars %>% mutate(speed = ymd(speed)) %>% errorCondition("masdlfkhj") %>% mutate(speed2 = speed)
cars %>% mutate(speed = ymd(speed)) %>% errorCondition("masdlfkhj") #%>% mutate(speed2 = speed)
edds_datapath <- "./tmdd testing/edds_test.csv"
edds <- edds_read(edds_datapath)
View(edds)
dis_vals <-
edds %>%
distinct(`Experiment date`, `Well number`, `Plate number`) %>%
nrow() # find distinct rows for each distinct well
if(!(dis_vals == nrow(edds))) validate("Duplicate rows found in EDDS file")
edds %>%
distinct(`Experiment date`, `Well number`, `Plate number`) %>%
edds %>%
distinct(`Experiment date`, `Well number`, `Plate number`)
edds %>%
distinct(`Experiment date`, `Well number`, `Plate number`)
edds %>%
distinct(`Experiment date`, `Well number`, `Plate number`) %>%
filter(`Plate number` > 1)
edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count()
edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count() %>% filter(n>1)
edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count() %>% filter(n>1) %>% as.character()
edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count() %>% filter(n>1) %>% as.table()
if(!(dis_vals == nrow(edds))) {
dups <- edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count() %>% filter(n>1)
validate(dups)}
as.character(dups)
validate(paste(dups,collapse = "\n"))
if(!(dis_vals == nrow(edds))) {
dups <- edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count() %>% filter(n>1)
as.character(dups)
validate(paste(dups,collapse = "\n"))
}
validate(paste(capture.output(print(dups)), collapse = "\n"))
?capture.output()
if(!(dis_vals == nrow(edds))) {
dups <- edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count() %>% filter(n>1)
as.character(dups)
validate(paste(capture.output(print(dups)), collapse = "\n"))
}
if(!(dis_vals == nrow(edds))) {
dups <- edds %>%
group_by(`Experiment date`, `Well number`, `Plate number`) %>%
count() %>% filter(n>1)
as.character(dups)
validate(paste(capture.output(print("Following entries were non-unique",
dups)), collapse = "\n"))
}
validate(paste("Following entries were non-unique",capture.output(print(dups)), collapse = "\n"))
edds %>% filter(`Tapir ID_unlabeled molecule (parent)` != 'MOCK') %>%
group_by(`Tapir ID_unlabeled molecule (parent)`) %>%  summarise(n = n()) %>% ungroup() %>%
distinct(n) %>% nrow() > 1
edds %>% filter(`Tapir ID_unlabeled molecule (parent)` != 'MOCK') %>%
group_by(`Tapir ID_unlabeled molecule (parent)`) %>%  summarise(n = n())
edds %>% filter(`Tapir ID_unlabeled molecule (parent)` != 'MOCK') %>%
group_by(`Tapir ID_unlabeled molecule (parent)`) %>%  summarise(n = n()) %>% ungroup() %>%
distinct(n)
edds %>% filter(`Tapir ID_unlabeled molecule (parent)` != 'MOCK') %>%
group_by(`Tapir ID_unlabeled molecule (parent)`) %>%  summarise(n = n()) %>% ungroup()
dups <- edds %>% filter(`Tapir ID_unlabeled molecule (parent)` != 'MOCK') %>%
group_by(`Tapir ID_unlabeled molecule (parent)`) %>%  summarise(n = n()) %>% ungroup()
dups
message(paste("Following TAPIR IDS were unequal in replicates",
capture.output(print(dups)), collapse = "\n"))
message(cat("Following TAPIR IDS were unequal in replicates",
capture.output(print(dups)), collapse = "\n"))
paste
message(paste("Following TAPIR IDS were unequal in replicates",
capture.output(print(dups)), collapse = "\n"))
message(cat("Following TAPIR IDS were unequal in replicates",
capture.output(print(dups)), collapse = "\n"))
message(cat("Following TAPIR IDS were unequal in replicates",
capture.output(print(dups)), collapse = "\n"))
main <- function() {
edds_datapath <- "./tmdd testing/edds_test.csv" #comment out when finished testing
}
rm
rm(edds_datapath)
if (getOption('run.main', default=TRUE)) {
main()
}
main <- function() {
edds_datapath <- "./tmdd testing/edds_test.csv" #comment out when finished testing
}
if (getOption('run.main', default=TRUE)) {
main()
}
main <- function() {
edds_datapath <- "./tmdd testing/edds_test.csv" #comment out when finished testing
print("zolo")
}
if (getOption('run.main', default=TRUE)) {
main()
}
main <- function() {
edds_datapath <<- "./tmdd testing/edds_test.csv" #comment out when finished testing
}
if (getOption('run.main', default=TRUE)) {
main()
}
edds_datapath
runApp()
